###############################################################
# Minimal commands to develop, build, test, and deploy
###############################################################
# just docs: https://github.com/casey/just
set shell                          := ["bash", "-c"]
set dotenv-load                    := true
# Change this to anything else to NOT publish a seperate npm module
NPM_PUBLISH                        := "true"
# E.g. 'my.app.com'. Some services e.g. auth need know the external endpoint for example OAuth
# The root domain for this app, serving index.html
export APP_FQDN                    := env_var_or_default("APP_FQDN", "server1.localhost")
export APP_PORT                    := env_var_or_default("APP_PORT", "4430")
export APP_PORT_BROWSER            := env_var_or_default("APP_PORT_BROWSER", "4440")
# SERVER_ORIGIN allows overriding the target server origin for the browser
export SERVER_ORIGIN               := env_var_or_default("SERVER_ORIGIN", "mermaid.mtfm.io:443")
# Always assume our current cloud ops image is versioned to the exact same app images we deploy
export DOCKER_TAG                  := `if [ "${GITHUB_ACTIONS}" = "true" ]; then echo "${GITHUB_SHA}"; else echo "$(git rev-parse --short=8 HEAD)"; fi`
# The NPM_TOKEN is required for publishing to https://www.npmjs.com
NPM_TOKEN                          := env_var_or_default("NPM_TOKEN", "")
# Source of deno scripts. When developing we need to switch this
DENO_SOURCE                        := env_var_or_default("DENO_SOURCE", "https://deno.land/x/metapages@v0.0.13")
vite                               := "VITE_APP_FQDN=" + APP_FQDN + " VITE_APP_PORT=" + APP_PORT + " NODE_OPTIONS='--max_old_space_size=16384' ./node_modules/vite/bin/vite.js"
tsc                                := "./node_modules/typescript/bin/tsc"
# minimal formatting, bold is very useful
bold                               := '\033[1m'
normal                             := '\033[0m'
green                              := "\\e[32m"
yellow                             := "\\e[33m"
blue                               := "\\e[34m"
magenta                            := "\\e[35m"
grey                               := "\\e[90m"

# If not in docker, get inside
@_help:
    echo -e ""
    just --list --unsorted --list-heading $'ðŸŒ± Commands:\n\n'
    echo -e ""
    echo -e "    Github  URL ðŸ”— {{green}}$(cat package.json | jq -r '.repository.url'){{normal}}"
    echo -e "    Publish URL ðŸ”— {{green}}https://mermaid.mtfm.io/{{normal}}"
    echo -e "    Develop URL ðŸ”— {{green}}https://{{APP_FQDN}}:{{APP_PORT}}/{{normal}}"
    echo -e ""

# Run the dev server pointing to the local docker stack. For production: just dev mermaid.mtfm.io
dev server="mermaid.mtfm.io:443": _css-debug-layer-setup _mkcert _ensure_npm_modules
    #!/usr/bin/env bash
    set -euo pipefail
    VITE_SERVER_ORIGIN={{SERVER_ORIGIN}}
    if [ "{{server}}" != "" ]; then
        VITE_SERVER_ORIGIN={{server}}
        echo "Browser development pointing to: ${VITE_SERVER_ORIGIN}"
    fi
    deno run --allow-all --unstable https://deno.land/x/metapages@v0.0.17/exec/open_url.ts https://metapages.github.io/load-page-when-available/?url=https://${APP_FQDN}:${APP_PORT_BROWSER}
    npm i
    just _tsc "--build"
    export HOST={{APP_FQDN}}
    export PORT={{APP_PORT_BROWSER}}
    export CERT_FILE=../.certs/{{APP_FQDN}}.pem
    export CERT_KEY_FILE=../.certs/{{APP_FQDN}}-key.pem
    export APP_PORT={{APP_PORT}}
    export BASE=/editor
    VITE_SERVER_ORIGIN=${VITE_SERVER_ORIGIN} {{vite}} --clearScreen false

# Build the browser client
build BASE="editor": _css-debug-layer-setup _ensure_npm_modules (_tsc "--build")
    VITE_SERVER_ORIGIN={{SERVER_ORIGIN}} \
    HOST={{APP_FQDN}} \
    PORT={{APP_PORT}} \
    OUTDIR=dist \
    BASE={{BASE}} \
        deno run --allow-all --unstable {{DENO_SOURCE}}/browser/vite-build.ts 

# Test: currently bare minimum: only building. Need proper test harness.
@test: _css-debug-layer-setup (_tsc "--build")

# Publish to npm and github pages.
publish npmversionargs="patch": _ensureGitPorcelain test (_npm_version npmversionargs) _githubpages_publish
    @# Push the tags up
    # git push origin v$(cat package.json | jq -r '.version')

# Toggle the CSS debug layer on/off
css-debug-layer-toggle: _css-debug-layer-setup
    #!/usr/bin/env bash
    set -euo pipefail

    if [ "$(wc -l < "src/debug.css")" -eq 1 ]; then 
        rm src/debug.css
        ln -s app-debug.css src/debug.css
        echo -e "ðŸ‘‰ {{green}}src/debug.css{{normal}} empty: Toggle css debug {{green}}ON{{normal}}" ;
    else
        rm src/debug.css
        echo "/* Do not edit this, use: just css-debug-layer-toggle */" > src/debug.css;
        echo -e "ðŸ‘‰ {{green}}src/debug.css{{normal}} not empty: Toggle css debug {{magenta}}OFF{{normal}}" ;
    fi

# Ensure we the file required for the debug layer, an empty file when disabled 
_css-debug-layer-setup:
    #!/usr/bin/env bash
    set -euo pipefail
    if [ ! -f src/debug.css ]; then 
        echo -e "NOT exists src/debug.css" ; 
        echo "/* Do not edit this, use: just css-debug-layer-toggle */" > src/debug.css;
        echo -e "ðŸ‘‰ {{green}}created src/debug.css{{normal}}" ; 
    fi

# Deletes: ../.certs dist docs
clean:
    rm -rf \
        dist \
        ../.certs \
        ../docs

# Rebuild the client on changes, but do not serve
watch BUILD_SUB_DIR="":
    VITE_SERVER_ORIGIN={{SERVER_ORIGIN}} \
    HOST={{APP_FQDN}} \
    PORT={{APP_PORT}} \
    OUTDIR=dist \
    BASE=editor \
        just _vite "build --watch"
    @# watchexec -w src -w tsconfig.json -w package.json -w vite.config.ts -- just build
    @# vite.config.ts

# Watch and serve browser client. Can't use vite to serve: https://github.com/vitejs/vite/issues/2754
serve BASE="": _mkcert (build BASE)
    cd ../docs && npx http-server --cors '*' -o {{BASE}} -a {{APP_FQDN}} -p {{APP_PORT}} --ssl --cert ../.certs/{{APP_FQDN}}.pem --key ../.certs/{{APP_FQDN}}-key.pem

# compile typescript src, may or may not emit artifacts
_tsc +args="": _ensure_npm_modules
    {{tsc}} {{args}}

@_mkcert:
    if [ ! -f /.dockerenv ]; then \
        just ../ingress/mkcert;\
    fi

@_ensure_npm_modules:
    if [ ! -f "{{tsc}}" ]; then npm i; fi

# vite builder commands
@_vite +args="":
    {{vite}} {{args}}

# bumps version, commits change, git tags
_npm_version npmversionargs="patch":
    npm version {{npmversionargs}}
    git add package.json package-lock.json
    git commit -m "bump version to $(cat package.json | jq -r '.version')"
    git tag v$(cat package.json | jq -r '.version')

# update "gh-pages" branch with the (versioned and default) current build (./docs) (and keeping all previous versions)
_githubpages_publish:
    VITE_SERVER_ORIGIN={{SERVER_ORIGIN}} \
        deno run --allow-all --unstable {{DENO_SOURCE}}/browser/gh-pages-publish-to-docs.ts

@_ensureGitPorcelain:
    deno run --allow-all --unstable https://deno.land/x/metapages@v0.0.13/git/git-fail-if-uncommitted-files.ts

@_require_NPM_TOKEN:
	if [ -z "{{NPM_TOKEN}}" ]; then echo "Missing NPM_TOKEN env var"; exit 1; fi
